#!/usr/bin/env bash
set -eou pipefail

# tat2:
#  glue for 3dcalc 3dTcat and 3dTstat (+ 3dNotes)
#  to compute time average T2

# default values
SCALE=1000
MASK_REL="subject_mask.nii.gz"
MASK=""
MKMASK=0
OUTPUT=tat2star.nii.gz
CLEAN=1


usage(){
  cat <<-HEREDOC
  USAGE:
    tat2 '/paths/to/*/t2.nii.gz' [-mask /the/only/mask.nii.gz] [-mask_rel $MASK_REL]  [-output $OUTPUT] [-scale $SCALE] [-mkmask] [-censor_rel relative/censor.1D] [-median|-mean] [-noclean] [-verbose]

  * calculates time averaged T2* like:
     1) 3dcalc -a input1  -b vol_norm -expr "(a/b)*SCALE/numvox #rep. f.ea. input
     2) 3dTstat -nzmean 'allnormed_concated'
  * final 'tat2start.nii.gz' will be in the cwd
  * use censor_rel to specify the motion censor file. single column no header file. nLines = nVols. 0=exclude, 1=keep.
    either a filename or regexp
       as a filename in input nifti directory (resolves to \$(dirname \$input)/\$censor_rel)  OR
       as a perl regexp run on \$input. like 's/(rest-\\d)_bold.nii.gz/\\1_cesnor.1d/'
  * default is to take the median value not the mean (20201016)
  * use -noclean to debug
HEREDOC
  exit 1
}
err() { echo -e "$@" >&2; exit 1; }
msg() { echo -e "# [$(date)] $@"; }

# keep args around for 3dNotes history
allargs="$@"

[ $# -eq 0 ] && usage
normfunc="-nomeanout -nzmedian"
censor_rel=""

# variable to store all the inputs we want to work on
declare -a glob
# read in any arguments/paramaters
while [ $# -gt 0 ]; do
 case $1 in
  -mask)       MASK="$2"; shift 2;;
  -mask_rel)   MASK_REL="$2"; shift 2;;  
  -output)     OUTPUT="$2"; shift 2;;
  -scale)      SCALE="$2"; shift 2;;
  -mkmask)     MKMASK=1; MASK_REL=""; shift;;
  -median)     normfunc="-nomeanout -nzmedian"; shift;;
  -mean)       normfunc="-nomeanout -nzmean"; shift;;
  -censor_rel) censor_rel="$2"; shift 2;;
  -noclean)    CLEAN=0; shift;;
  -verbose)    set -x; shift;;
  -h*)         usage;;
  -*)          echo "unknown option '$1'"; usage;;
  *)           glob+=("$1"); shift;;
 esac
done

# need to have at least one file to average
[ -z "${glob[*]}" ] && usage

# how many files do we have
nfiles=$(find -L ${glob[@]} -maxdepth 0 | wc -l)
[ $nfiles -eq 0 ] && err "no files match input globs: ${glob[@]}"
[ $nfiles -eq 1 ] && echo "WARNING: only one file matches '${glob[@]}'. expected all (>1) runs" 
[ $nfiles -gt 10 ] && echo "WARNING: running on $nfiles epi files! Are you sure you don't want to run one visit at a time?" 

[ -r "$OUTPUT" ] && echo "# have $OUTPUT; rm $OUTPUT # to redo" && exit 0


tmpd=$(mktemp -d /tmp/tat2star_XXXX)
cnt=0
all_numvox="" # will be populated with each subjectmask
for input in ${glob[@]}; do
   [ -n "$MASK" ] && mask="$MASK" || mask="$(dirname "$input")/$MASK_REL"
   if [ ! -f $mask ]; then
      [ $MKMASK -eq 0 ] && err "mask '$mask' DNE; add -mkmask to create"
      mask="$tmpd/subj_mask.nii.gz" 
      coverage_mask $mask "${glob[@]}"
   fi
   # add _tat2.nii.gz to the end
   runoutput="$tmpd/${cnt}_tat2.nii.gz"

   # calc number of voxels
   numvox=$(3dBrickStat -count -non-zero $mask|sed 's/[\t ]//g')

   # verbose
   msg "tat2: $input -> $runoutput"
   vol_mean=$tmpd/${cnt}_volnorm.1D

   # censor input
   if [ -n "$censor_rel" ]; then
      censor_file="$(dirname "$input")/$censor_rel"
      # try regexp pattern replace if censor_rel looks like s/
      [ ! -r "$censor_file" -a ${censor_rel:0:2} == "s/" ] &&
         censor_file="$(echo "$input" | perl -pe "$censor_rel")"
      if [ "$censor_file" == "$input" ]; then
         rm -r $tmpd 
         err "ERR: censor file subsitition failed '$censor_file' matches inputfile! rel '$censor_rel' for '$input'"
      fi
      if [ ! -r "$censor_file" ]; then 
         rm -r $tmpd 
         err "ERR: censor file '$censor_file' DNE!"
      fi
      # pull out good index (censor=1 means keep). zero based
      idxs=$(perl -lne 'push @i, $.-1 if /^1/; END{print join ",", @i;}' $censor_file)
      nkeep=$(echo $idxs| tr ',' '\n' |wc -l)
      msg "censor: using $nkeep/$(3dinfo -nt $input) timepoints"
      # truncate input
      newinput="$tmpd/${cnt}_inputcensor_$nkeep.nii.gz"
      3dTcat -prefix $newinput "$input[$idxs]"
      input="$newinput"
      runoutput="$tmpd/${cnt}_keep${nkeep}_tat2.nii.gz"
   fi

   # calc sum of each volume
   3dROIstats $normfunc -mask $mask -1Dformat $input > $vol_mean 

   # normalize each voxel by the volume average or median
   # scale by SCALE and number of good (within mask) voxels in the run
   3dcalc \
     -a $input \
     -b $vol_mean\
     -datum float -overwrite \
     -expr "(a/b)*$SCALE/$numvox" \
     -prefix $runoutput
  let ++cnt
  all_numvox="$all_numvox$numvox,"
done

[ $cnt -ne $nfiles ] && err "ERROR: create $cnt/$nfiles in $tmpd"

msg "tat2star $OUTPUT"
if [ $nfiles -gt 1 ]; then
   3dTcat -overwrite -prefix $tmpd/tat2_all.nii.gz $tmpd/*_tat2.nii.gz
   3dTstat -prefix $OUTPUT -overwrite -nzmean $tmpd/tat2_all.nii.gz
else
   3dTstat -prefix $OUTPUT -overwrite -nzmean $tmpd/*_tat2.nii.gz
fi

3dNotes -h "$0 $allargs # $(pwd); SCALE=$SCALE, nvoxes=$all_numvox; nt=$(3dinfo -nt $tmpd/*_tat2.nii.gz)" $OUTPUT

[ $CLEAN -eq 1 ] && rm -r $tmpd || echo "find temporary files in '$tmpd'; remove '-noclean' if not testing"
