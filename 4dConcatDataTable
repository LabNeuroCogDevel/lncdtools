#!/usr/bin/env bash
set -euo pipefail
trap 'e=$?; [ $e -ne 0 ] && echo "$0 exited in error"' EXIT

# wrap around 3dbucket and 3drefit
# extract a subbrick from a list of nifti 
# label with luna ids
# 20200430 - like 4dConcatSubBriks but for a datatable file
#
# Useful for quality checking many structurals, subject masks,  or individual contrasts

# input:
#   1) prefix
#   2) datatable txt file
# env

[ $# -ne 2 ] && 
  echo -e "look at files referenced in a datatable\nUSAGE: $0 output.nii.gz datatable" >&2 &&
  exit 1

prefix="$1"; shift
datatable="$1"; shift

! [[ $prefix =~ .nii$|.nii.gz$|.HEAD$ ]] && echo "prefix '$prefix' must end in .nii, .nii.gz, or .HEAD" && exit 1
[ ! -r "$datatable" ] && echo "$datatable file doesn't exist!" && exit 1
#read ididx fileidx <<< $(sed 1q $datatable | sed 's/[ \t]\+/\n/g' | perl -lne 'print $. if m/(Subj|InputFile)/i')
idxs=($(sed 1q $datatable | sed 's/[ \t]\+/\n/g' | perl -lne 'print $. if m/(Subj|InputFile)/i'))
ididx=${idxs[0]}
fileidx=${idxs[1]}

[ -z "$fileidx" ] && echo "no InputFile in '$datatable' header?! (idxs '$ididx' '$fileidx')" && exit 1
ids=($(awk "(NR>1) { print \$$ididx}" $datatable))
files=($(awk "(NR>1){ print \$$fileidx}" $datatable))
[ ${#ids[@]} -ne ${#files[@]} ] && echo "error parsing '$datatable'. have different number of ids and files!" && exit 1


[ -r "$prefix" ] && echo "rm $prefix # to regenerate; skipping 3dbucket and 3drefit" && exit 0

echo "3dbucket: combine"
3dbucket -prefix "$prefix" ${files[@]}
echo "3drefit: relabel"
3drefit -relabel_all_str "${ids[@]}" "$prefix"
