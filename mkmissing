#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
find pattern (probably subject id) in files of one step missing in the next
by matching a regular expression against expanded wildcard globs

Example:
   mkmissing -1 'bids/sub-*' -2 'proc/sub-*' # show subj in bids but not proc
   # either side can have more than one glob to use
   mkmissing -1 'bids/sub-*' -2 'proc_a/sub-*' -2 'proc_b/sub-*'
"""
import re
from glob import glob


def patt_in_wildcard(patt, wildcards):
    """expand wildcards and extract matches"""
    if not isinstance(wildcards, list):
        wildcards = [wildcards]
    ext = [patt.search(x) for w in wildcards for x in glob(w)]
    ext = [m.group(0) for m in ext if m is not None]
    # set: sort and uniq
    return set(ext)


def __main__():
    from argparse import RawTextHelpFormatter, ArgumentParser
    parser = ArgumentParser(description=__doc__,
                            formatter_class=RawTextHelpFormatter)
    parser.add_argument('-1', '--inglob', dest='in_glob', required=True,
                        action='append',
                        help="input file wildcard")
    parser.add_argument('-2', '--outglob', dest='out_glob', required=True,
                        action='append',
                        help="step 2 file wildcard")
    parser.add_argument('-p', '--pattern', dest='patt',
                        help="pattern to match in file names",
                        default="\d{5}_\d{8}")
    parser.add_argument('-v', '--verbose', action="store_true")
    parser.add_argument('-o', '--saveto', dest='saveto',
                        help="file to write if any differences\n" +
                        "if not specified, output is printed to terminal",
                        default=None)
    parser.add_argument('-e', '--save_empty', action='store_true',
                        help="save file even if there is no difference\n" +
                        "default is false for `make`'s timestamp compare",
                        default=None)
    args = parser.parse_args()

    p = re.compile(args.patt)

    # within 'in' set but missing from 'out' set
    # order matters: set([1,2,3]) - set([1,2,4]) = {3}
    inset = patt_in_wildcard(p, args.in_glob)
    outset = patt_in_wildcard(p, args.out_glob)
    missing = inset - outset

    # when debuging pattern, it's useful to see the matches
    if args.verbose:
        print(args.in_glob)
        print(inset)
        print(args.out_glob)
        print(outset)

    outstr = "\n".join(missing)
    # dont write to file if none provided
    # and only write empty missing to file if save_empty is set
    if args.saveto is None:
        print(outstr)
    elif args.save_empty or missing:
        with open(args.saveto, 'w') as f:
            f.write(outstr + "\n")


if __name__ == "__main__":
    __main__()
